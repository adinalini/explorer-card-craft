// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ophgbcyhxvwljfztlvyu.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9waGdiY3loeHZ3bGpmenRsdnl1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQzMzU4NzYsImV4cCI6MjA2OTkxMTg3Nn0.iiiRP6WtGtwI_jJDnAJUqmEZcoNUbYT3HiBl3VuBnKs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: false, // Suppress GoTrueClient warnings
  }
});

// Cached client instance with session headers
let supabaseWithSessionClient: ReturnType<typeof createClient<Database>> | null = null;
let currentSessionToken = '';

// Helper function to create a supabase client with session token headers
export const getSupabaseWithSession = () => {
  // Get current session token
  const sessionToken = typeof window !== 'undefined' ? sessionStorage.getItem('userSessionId') || '' : '';
  
  // Only create new client if session token changed or no client exists
  if (!supabaseWithSessionClient || currentSessionToken !== sessionToken) {
    currentSessionToken = sessionToken;
    
    supabaseWithSessionClient = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        storage: localStorage,
        persistSession: false, // Disable session persistence to avoid conflicts
        autoRefreshToken: false, // Disable auto refresh to avoid conflicts
        detectSessionInUrl: false, // Suppress GoTrueClient warnings
      },
      global: {
        headers: {
          'x-session-token': sessionToken
        }
      }
    });
  }
  
  return supabaseWithSessionClient;
};